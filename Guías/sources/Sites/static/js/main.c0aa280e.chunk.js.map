{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","palette","type","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","title","list","width","margin","table","minWidth","Results","React","memo","props","classes","loading","result","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","i","key","Array","length","keys","col","j","align","App","useState","query","setQuery","userRequest","setUserRequest","useEffect","request","get","on","alert","then","res","body","reduce","acc","AppBar","position","Toolbar","Typography","variant","style","marginTop","padding","display","flex","TextField","id","label","fullWidth","value","onKeyDown","event","onChange","target","Button","color","size","onClick","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c0aa280e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Paper from '@material-ui/core/Paper';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Link from '@material-ui/core/Link';\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\nimport TextField from '@material-ui/core/TextField';\nimport request from 'superagent'\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'light',\n  },\n})\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: '100%'\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  table: {\n    minWidth: 650,\n  },\n}));\n\n\nconst Results = React.memo(function Results(props){\n  const classes = useStyles();\n  const {loading, result} = props\n  return (<div>\n    {loading?'Cargando...':\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Nombre</TableCell>\n                    <TableCell>Año</TableCell>\n                    <TableCell>Rating</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {result.map((row,i) => (\n                    <TableRow key={i}>\n                      {[...Array(row.length).keys()].map((col,j) => (\n                        <TableCell key={i+\"-\"+j} align={col>2?\"right\":\"left\"}>{row[col]?row[col]:''}</TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>}\n    </div>\n    )\n})\n\nfunction App() {\n  const classes = useStyles();\n  const [query, setQuery] = useState(\"\");\n  const [userRequest, setUserRequest] = useState({loading: false, result: []});\n\n  const handleChange = (event) => {\n    setQuery(event.target.value);\n  };\n\n  const handleKeyDown = (event) => {\n    if(event.key == 'Enter'){\n      setUserRequest({loading: true, result:[]})\n    }\n  }\n\n  const submit = () => {\n    setUserRequest({loading: true, result:[]})\n  }\n\n  useEffect(() => {\n    \n    if(userRequest.loading){\n      request.get('/~profesor/search.php').query({ query: query})\n      .on('error', () => {\n        alert('O no! hubo un error!')\n      })\n      .then(res => {\n        setUserRequest({loading: false, result: res.body})\n      });  \n    } else{\n    \n    }\n  }, [userRequest]);\n\n  \n  const maxCols = userRequest.result.reduce((acc, row) => {\n    if(row.length>acc) return row.length \n    else return acc\n  }, 0)\n  \n  \n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <MuiThemeProvider theme={theme}>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\" className={classes.title}>\n                Películas\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <div style={{margin: 8}}>\n            <Paper style={{marginTop:16, padding: 16}}>\n              \n              <div style={{display: \"flex\"}}>\n                <div style={{flex: \"1 1 auto\"}}>  \n                  <TextField id=\"query\" label=\"Escriba algún nombre\" fullWidth value={query} onKeyDown={handleKeyDown} onChange={handleChange}/>\n                </div>\n                <div style={{flex: \"0 0 100px\"}}>\n                  <Button variant=\"contained\" color=\"primary\" size=\"medium\" className={classes.margin} onClick={submit}>\n                    Buscar\n                  </Button>\n                </div>\n              </div>\n              \n            </Paper>\n            <div style={{marginTop: 32, marginBottom: 16}}>\n              Resultados\n            </div>\n            <Results loading={userRequest.loading} result={userRequest.result} />\n            \n          </div>\n          \n        </MuiThemeProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}